// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CircularServiceClient is the client API for CircularService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CircularServiceClient interface {
	// 定义计算面积接口
	Area(ctx context.Context, in *AreaRequest, opts ...grpc.CallOption) (*AreaResponse, error)
}

type circularServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCircularServiceClient(cc grpc.ClientConnInterface) CircularServiceClient {
	return &circularServiceClient{cc}
}

func (c *circularServiceClient) Area(ctx context.Context, in *AreaRequest, opts ...grpc.CallOption) (*AreaResponse, error) {
	out := new(AreaResponse)
	err := c.cc.Invoke(ctx, "/model.CircularService/Area", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CircularServiceServer is the server API for CircularService service.
// All implementations must embed UnimplementedCircularServiceServer
// for forward compatibility
type CircularServiceServer interface {
	// 定义计算面积接口
	Area(context.Context, *AreaRequest) (*AreaResponse, error)
	mustEmbedUnimplementedCircularServiceServer()
}

// UnimplementedCircularServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCircularServiceServer struct {
}

func (UnimplementedCircularServiceServer) Area(context.Context, *AreaRequest) (*AreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Area not implemented")
}
func (UnimplementedCircularServiceServer) mustEmbedUnimplementedCircularServiceServer() {}

// UnsafeCircularServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CircularServiceServer will
// result in compilation errors.
type UnsafeCircularServiceServer interface {
	mustEmbedUnimplementedCircularServiceServer()
}

func RegisterCircularServiceServer(s grpc.ServiceRegistrar, srv CircularServiceServer) {
	s.RegisterService(&_CircularService_serviceDesc, srv)
}

func _CircularService_Area_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CircularServiceServer).Area(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.CircularService/Area",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CircularServiceServer).Area(ctx, req.(*AreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CircularService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.CircularService",
	HandlerType: (*CircularServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Area",
			Handler:    _CircularService_Area_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "area.proto",
}
