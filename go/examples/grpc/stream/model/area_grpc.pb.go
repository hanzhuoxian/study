// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CircularServiceClient is the client API for CircularService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CircularServiceClient interface {
	// 定义计算面积接口
	Area(ctx context.Context, opts ...grpc.CallOption) (CircularService_AreaClient, error)
}

type circularServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCircularServiceClient(cc grpc.ClientConnInterface) CircularServiceClient {
	return &circularServiceClient{cc}
}

func (c *circularServiceClient) Area(ctx context.Context, opts ...grpc.CallOption) (CircularService_AreaClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CircularService_serviceDesc.Streams[0], "/model.CircularService/Area", opts...)
	if err != nil {
		return nil, err
	}
	x := &circularServiceAreaClient{stream}
	return x, nil
}

type CircularService_AreaClient interface {
	Send(*AreaRequest) error
	Recv() (*AreaResponse, error)
	grpc.ClientStream
}

type circularServiceAreaClient struct {
	grpc.ClientStream
}

func (x *circularServiceAreaClient) Send(m *AreaRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *circularServiceAreaClient) Recv() (*AreaResponse, error) {
	m := new(AreaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CircularServiceServer is the server API for CircularService service.
// All implementations must embed UnimplementedCircularServiceServer
// for forward compatibility
type CircularServiceServer interface {
	// 定义计算面积接口
	Area(CircularService_AreaServer) error
	mustEmbedUnimplementedCircularServiceServer()
}

// UnimplementedCircularServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCircularServiceServer struct {
}

func (UnimplementedCircularServiceServer) Area(CircularService_AreaServer) error {
	return status.Errorf(codes.Unimplemented, "method Area not implemented")
}
func (UnimplementedCircularServiceServer) mustEmbedUnimplementedCircularServiceServer() {}

// UnsafeCircularServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CircularServiceServer will
// result in compilation errors.
type UnsafeCircularServiceServer interface {
	mustEmbedUnimplementedCircularServiceServer()
}

func RegisterCircularServiceServer(s grpc.ServiceRegistrar, srv CircularServiceServer) {
	s.RegisterService(&_CircularService_serviceDesc, srv)
}

func _CircularService_Area_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CircularServiceServer).Area(&circularServiceAreaServer{stream})
}

type CircularService_AreaServer interface {
	Send(*AreaResponse) error
	Recv() (*AreaRequest, error)
	grpc.ServerStream
}

type circularServiceAreaServer struct {
	grpc.ServerStream
}

func (x *circularServiceAreaServer) Send(m *AreaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *circularServiceAreaServer) Recv() (*AreaRequest, error) {
	m := new(AreaRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CircularService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.CircularService",
	HandlerType: (*CircularServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Area",
			Handler:       _CircularService_Area_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "model/area.proto",
}
