// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/daymenu/gostudy/examples/ent/ent/group"
	"github.com/facebook/ent/dialect/sql"
)

// Group is the model entity for the Group schema.
type Group struct {
	config `gqlgen:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// NillableName holds the value of the "nillable_name" field.
	NillableName *string `json:"nillable_name,omitempty"`
	// OptionalName holds the value of the "optional_name" field.
	OptionalName string `json:"optional_name,omitempty" gqlgen:"gql_name"`
	// CreationDate holds the value of the "creation_date" field.
	CreationDate time.Time `json:"creation_date,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Group) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // nillable_name
		&sql.NullString{}, // optional_name
		&sql.NullTime{},   // creation_date
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Group fields.
func (gr *Group) assignValues(values ...interface{}) error {
	if m, n := len(values), len(group.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	gr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		gr.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field nillable_name", values[1])
	} else if value.Valid {
		gr.NillableName = new(string)
		*gr.NillableName = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field optional_name", values[2])
	} else if value.Valid {
		gr.OptionalName = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field creation_date", values[3])
	} else if value.Valid {
		gr.CreationDate = value.Time
	}
	return nil
}

// Update returns a builder for updating this Group.
// Note that, you need to call Group.Unwrap() before calling this method, if this Group
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *Group) Update() *GroupUpdateOne {
	return (&GroupClient{config: gr.config}).UpdateOne(gr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (gr *Group) Unwrap() *Group {
	tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Group is not a transactional entity")
	}
	gr.config.driver = tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *Group) String() string {
	var builder strings.Builder
	builder.WriteString("Group(")
	builder.WriteString(fmt.Sprintf("id=%v", gr.ID))
	builder.WriteString(", name=")
	builder.WriteString(gr.Name)
	if v := gr.NillableName; v != nil {
		builder.WriteString(", nillable_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", optional_name=")
	builder.WriteString(gr.OptionalName)
	builder.WriteString(", creation_date=")
	builder.WriteString(gr.CreationDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Groups is a parsable slice of Group.
type Groups []*Group

func (gr Groups) config(cfg config) {
	for _i := range gr {
		gr[_i].config = cfg
	}
}
