// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/vessel/vessel.proto

package daymenu_shippping_api_api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/micro/go-micro/api/proto"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("proto/vessel/vessel.proto", fileDescriptor_04ef66862bb50716) }

var fileDescriptor_04ef66862bb50716 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8f, 0xc1, 0xaa, 0xc2, 0x30,
	0x10, 0x45, 0xdf, 0x43, 0xe9, 0x22, 0x08, 0x4a, 0x76, 0xed, 0xd2, 0xa5, 0xd2, 0x04, 0xec, 0x17,
	0x88, 0xa0, 0x5b, 0x11, 0x74, 0x9f, 0xb6, 0x43, 0x3a, 0xd0, 0x26, 0x63, 0x93, 0x16, 0xfc, 0x6f,
	0x3f, 0x40, 0x9a, 0x0a, 0x6e, 0xb3, 0x18, 0xe6, 0x72, 0x39, 0x73, 0x60, 0x58, 0x4a, 0xbd, 0xf5,
	0x56, 0x8e, 0xe0, 0x1c, 0xb4, 0xdf, 0x25, 0x42, 0xc7, 0xd3, 0x5a, 0xbd, 0x3a, 0x30, 0x83, 0x70,
	0x0d, 0x12, 0x11, 0x1a, 0x2d, 0x14, 0xe1, 0x34, 0x59, 0xae, 0xd1, 0x37, 0x43, 0x29, 0x2a, 0xdb,
	0xc9, 0x0e, 0xab, 0xde, 0x4a, 0x6d, 0xf3, 0x39, 0x28, 0x42, 0x39, 0x3b, 0x27, 0x38, 0xa4, 0xc3,
	0xfb, 0x9f, 0x25, 0x8f, 0xa0, 0xe6, 0x7b, 0xb6, 0xbc, 0x2a, 0x0d, 0x7c, 0x2d, 0xb4, 0x0d, 0xba,
	0x1b, 0x3c, 0x07, 0x70, 0x3e, 0xdb, 0xfc, 0x0a, 0x47, 0xd6, 0x38, 0xd8, 0xfe, 0xf1, 0x1d, 0x5b,
	0x5c, 0xc0, 0xc7, 0xb1, 0x39, 0x4b, 0x4e, 0x3d, 0x28, 0x0f, 0xd1, 0xf8, 0x9d, 0xea, 0x68, 0xbc,
	0x60, 0xab, 0x33, 0x9a, 0xfa, 0x38, 0x2a, 0x54, 0x65, 0x1b, 0x77, 0x54, 0x26, 0xe1, 0xfb, 0xe2,
	0x13, 0x00, 0x00, 0xff, 0xff, 0xc5, 0xd1, 0x8a, 0x3d, 0x64, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Vessel service

type VesselClient interface {
	Page(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Get(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Create(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Update(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	FindAvaiable(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
}

type vesselClient struct {
	c           client.Client
	serviceName string
}

func NewVesselClient(serviceName string, c client.Client) VesselClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "daymenu.shippping.api.api"
	}
	return &vesselClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *vesselClient) Page(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.serviceName, "Vessel.Page", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vesselClient) Get(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.serviceName, "Vessel.Get", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vesselClient) Create(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.serviceName, "Vessel.Create", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vesselClient) Update(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.serviceName, "Vessel.Update", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vesselClient) FindAvaiable(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.serviceName, "Vessel.FindAvaiable", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Vessel service

type VesselHandler interface {
	Page(context.Context, *proto1.Request, *proto1.Response) error
	Get(context.Context, *proto1.Request, *proto1.Response) error
	Create(context.Context, *proto1.Request, *proto1.Response) error
	Update(context.Context, *proto1.Request, *proto1.Response) error
	FindAvaiable(context.Context, *proto1.Request, *proto1.Response) error
}

func RegisterVesselHandler(s server.Server, hdlr VesselHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Vessel{hdlr}, opts...))
}

type Vessel struct {
	VesselHandler
}

func (h *Vessel) Page(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.VesselHandler.Page(ctx, in, out)
}

func (h *Vessel) Get(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.VesselHandler.Get(ctx, in, out)
}

func (h *Vessel) Create(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.VesselHandler.Create(ctx, in, out)
}

func (h *Vessel) Update(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.VesselHandler.Update(ctx, in, out)
}

func (h *Vessel) FindAvaiable(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.VesselHandler.FindAvaiable(ctx, in, out)
}
