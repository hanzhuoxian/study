// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/container/container.proto

package daymenu_shippping_api_api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/micro/go-micro/api/proto"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("proto/container/container.proto", fileDescriptor_3ec6c08f9f0309d9) }

var fileDescriptor_3ec6c08f9f0309d9 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xb1, 0x4a, 0xc6, 0x30,
	0x10, 0x80, 0x45, 0xa5, 0x48, 0x16, 0x4b, 0x36, 0xbb, 0x08, 0x8e, 0x4a, 0x13, 0xd0, 0x37, 0xb0,
	0x43, 0x57, 0x51, 0xfa, 0x00, 0x69, 0x7a, 0xa4, 0x87, 0x34, 0x77, 0x26, 0x69, 0xc1, 0x17, 0xf2,
	0x39, 0xa5, 0x29, 0x3f, 0x5d, 0x33, 0x04, 0x3e, 0x72, 0xdf, 0x7d, 0xc3, 0x89, 0x47, 0x0e, 0x94,
	0x48, 0x5b, 0xf2, 0xc9, 0xa0, 0x87, 0x70, 0x92, 0xca, 0x13, 0xf9, 0x30, 0x99, 0xdf, 0x05, 0xfc,
	0xaa, 0xe2, 0x8c, 0xcc, 0x8c, 0xde, 0x29, 0xc3, 0xb8, 0xbf, 0xa6, 0x75, 0x98, 0xe6, 0x75, 0x54,
	0x96, 0x16, 0xbd, 0xa0, 0x0d, 0xa4, 0x1d, 0xb5, 0x07, 0x18, 0x46, 0x7d, 0x94, 0x77, 0x39, 0xd3,
	0xeb, 0xdf, 0xb5, 0xa8, 0xbb, 0x4b, 0xfd, 0x0b, 0xc2, 0x86, 0x16, 0xe4, 0x8b, 0xb8, 0xfd, 0x30,
	0x0e, 0xe4, 0xbd, 0x72, 0x94, 0xc3, 0x9f, 0xf0, 0xb3, 0x42, 0x4c, 0x4d, 0x7d, 0x7e, 0x44, 0x26,
	0x1f, 0xe1, 0xe9, 0x4a, 0x3e, 0x8b, 0x9b, 0x1e, 0x52, 0xb1, 0x3b, 0xc4, 0xc2, 0xae, 0x16, 0x77,
	0x3d, 0x6e, 0xf0, 0x6e, 0xec, 0x77, 0xd9, 0x42, 0x2b, 0xaa, 0x2e, 0x80, 0x49, 0x50, 0xac, 0x0f,
	0x3c, 0x95, 0xea, 0x63, 0x95, 0xef, 0xf5, 0xf6, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x6b, 0xf4, 0xb9,
	0xb0, 0x9c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ContainerService service

type ContainerServiceClient interface {
	Page(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Get(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Use(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	GiveBack(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Create(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	Update(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
}

type containerServiceClient struct {
	c           client.Client
	serviceName string
}

func NewContainerServiceClient(serviceName string, c client.Client) ContainerServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "daymenu.shippping.api.api"
	}
	return &containerServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *containerServiceClient) Page(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.serviceName, "ContainerService.Page", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) Get(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.serviceName, "ContainerService.Get", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) Use(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.serviceName, "ContainerService.Use", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) GiveBack(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.serviceName, "ContainerService.GiveBack", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) Create(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.serviceName, "ContainerService.Create", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) Update(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.serviceName, "ContainerService.Update", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ContainerService service

type ContainerServiceHandler interface {
	Page(context.Context, *proto1.Request, *proto1.Response) error
	Get(context.Context, *proto1.Request, *proto1.Response) error
	Use(context.Context, *proto1.Request, *proto1.Response) error
	GiveBack(context.Context, *proto1.Request, *proto1.Response) error
	Create(context.Context, *proto1.Request, *proto1.Response) error
	Update(context.Context, *proto1.Request, *proto1.Response) error
}

func RegisterContainerServiceHandler(s server.Server, hdlr ContainerServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&ContainerService{hdlr}, opts...))
}

type ContainerService struct {
	ContainerServiceHandler
}

func (h *ContainerService) Page(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ContainerServiceHandler.Page(ctx, in, out)
}

func (h *ContainerService) Get(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ContainerServiceHandler.Get(ctx, in, out)
}

func (h *ContainerService) Use(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ContainerServiceHandler.Use(ctx, in, out)
}

func (h *ContainerService) GiveBack(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ContainerServiceHandler.GiveBack(ctx, in, out)
}

func (h *ContainerService) Create(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ContainerServiceHandler.Create(ctx, in, out)
}

func (h *ContainerService) Update(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.ContainerServiceHandler.Update(ctx, in, out)
}
